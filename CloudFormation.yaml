Description:  WordPress application with highly available, scalable and fault tolerant architecture 
Metadata:
  Authors:
    Description:  David Henry (mr.d.henry@gmail.com)
  Purpose:
    Description: "This stack is used to create a highly available, scalable and fault tolerant architect to host WordPress application.  This architecture include a VPC across three availability zones and three subnets per zone.  The publicly accessable subents are connected to the internet via an internet gateway. EFS FileSystem, with three Mount Targets to store the content of WordPress. A MySQL DBS Instance and a VPC Security Group associated with Mount targets.  In its
    
    Scenario:
    MyITCorp has been contracted to migrate a single server, on-prem instance of WordPress to AWS.  The client is attempting to reduce their on-prem IT footprint but has decided not to go serverless at the moment. The client is looking to keep costs low and not have to worry about managing their own infrastructre onsite.  They have provided us with a list of known IP ranges from vendors and partners that we cannot use.  
    
    Networks we cannot use:
    Common use - 192.168.1.0/24 - 192.168.9.0/24
    On-Premise (DC) - 192.168.20.0/24
    AWS Pilot - 10.0.0.0/16
    Azure Pilot - 172.31.0.0/16
    Docker Bridge Network - 172.17.0.0/16
    Due to a recent bid for CMS contracts we must avoid any potential conflicts.  We cannot confirm which networks are in use at CMS; however, we can confirm the default range is 10.127.0.0/9! 
    
    The client is requesting the application to be highly available, scalable and fault tolerant. A subnet is located in one availability zone. The number of availability zones will impact the applications high availability and resiliance.  We have decided to build the VPC across three availability zone's.  We also want a spare for growth and future needs of the company. 
      Total = 4 availability zone's
    
    We are implementing a three tier archiecture for different types of infrastructure such as, Web, Application, Database, etc. plus a spare. 
      Total = 4 subnets 
    
    We have decided that due to the size and growth potential for the company we need a /16 network.  This will need 16 subnets, each of which will be a /20.
    
    Exceptions:
    Although we have provisioned for additional subnets and availability zones in the IP plan we will not allocated all of the resources in the this project.  We will only be creating the necessary physical infrastructure to complete the project.
    
    Minimal parameters have been used to make this project a point and click installation to remain within Amazon free tier vs a custom install that could break it out of free tier.  If you leave this project running or add data you may also run the chances of leaving free tier.  
    
    This is not designed to be a production ready installation.  It is bad practice to pass visible password parameters in the stack that can be eaily exploited.  The primary goal of this project is to show case a cloudformation stack with a point and click, highly available, scalable and fault tollerant appliation. 
    
    Tech Used:
    CloudFormation
    EC2
    IAM
    Auto Scaling Group
    Load Balancer
    VPC 
    Route Tables
    SNS
    Subnets
    Internet Gateway
    Security Groups
    Target Groups
    Parameter Store
    Cloudwatch
    RDS (MySQL)
    EFS
    Launch Template - with User Data
    
    Skills Building:
    High Availability
    Scaling
    Fault Taulerance
    IP Planning
    IaaC
    "
                                    
Parameters:                                                                  
  LatestAMIID:                                                               
    Description: AMI for EC2 (default is latest AMI Linux 2023)                   
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'                  
    #Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2' #older instance but still widely used
    #Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64' #cheaper alternative but need to install your own utilities
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
    
  EmailNotification:
    Description: The email address to notify when there are any scaling activities
    Type: String
    Default: dhenry@myitcorp.com 

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyITCorpVPC

  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: MyITCorp-IGW

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RTPub: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: MyITCorp-VPC-RT-pub

  RTPubDefaultIPv4: 
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RTPub
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway

  RTPubDefaultIPv6: 
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RTPub
      DestinationIpv6CidrBlock: '::/0'
      GatewayId:
        Ref: InternetGateway

  RTAssociationPubA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SNPUBA
      RouteTableId:
        Ref: RTPub

  RTAssociationPubB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SNPUBB
      RouteTableId:
        Ref: RTPub

  RTAssociationPubC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SNPUBC
      RouteTableId:
        Ref: RTPub

  SNDBA:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.16.0/20
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '01::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: sn-db-A

  SNDBB:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.80.0/20
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '05::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: sn-db-B

  SNDBC:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.16.144.0/20
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '09::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: sn-db-C

  SNAPPA:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.32.0/20
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '02::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: sn-app-A

  SNAPPB:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.96.0/20
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '06::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: sn-app-B

  SNAPPC:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.16.160.0/20
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '0A::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: sn-app-C

  SNPUBA:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.48.0/20
      MapPublicIpOnLaunch: true
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '03::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: sn-pub-A

  SNPUBB:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.112.0/20
      MapPublicIpOnLaunch: true
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '07::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: sn-pub-B

  SNPUBC:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.16.176.0/20
      MapPublicIpOnLaunch: true
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '0B::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      Tags:
        - Key: Name
          Value: sn-pub-C

  IPv6WorkaroundSubnetPUBA:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref SNPUBA

  IPv6WorkaroundSubnetPUBB:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref SNPUBB

  IPv6WorkaroundSubnetPUBC:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref SNPUBC

  IPv6WorkaroundRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "ipv6-fix-logs-${AWS::StackName}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: !Sub "ipv6-fix-modify-${AWS::StackName}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:ModifySubnetAttribute
              Resource: "*"

  IPv6WorkaroundLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Code: #import cfnresponse below required to send respose back to CFN
        ZipFile:
          Fn::Sub: |
            import cfnresponse
            import boto3

            def lambda_handler(event, context):
                if event['RequestType'] is 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS)
                  return

                responseValue = event['ResourceProperties']['SubnetId']
                ec2 = boto3.client('ec2', region_name='${AWS::Region}')
                ec2.modify_subnet_attribute(AssignIpv6AddressOnCreation={
                                                'Value': True
                                              },
                                              SubnetId=responseValue)
                responseData = {}
                responseData['SubnetId'] = responseValue
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
      Runtime: python3.9
      Role: !GetAtt IPv6WorkaroundRole.Arn
      Timeout: 30

  SGWordpress:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Control access to WordPress Instance(s)
      SecurityGroupIngress: 
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

  SGDatabase:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Control access to Database
      SecurityGroupIngress: 
        - Description: 'Allow MySQL IN'
          IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref SGWordpress

  SGLoadBalancer:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Control access to Load Balancer
      SecurityGroupIngress: 
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          # Allow access from anywhere to our application
          CidrIp: '0.0.0.0/0'

  SGEFS:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Control access to EFS
      SecurityGroupIngress: 
        - Description: 'Allow NFS/EFS IPv4 IN'
          IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !Ref SGWordpress

  TGAutoScalingGroup: 
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties: 
      Name: MyITCorpWordPressALBTG
      Port: '80'
      Protocol: HTTP
      VpcId: !Ref VPC      

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
    - LaunchTemplate
    Properties: 
      Name: MyITCorp-WordPress-ALB
      Scheme: internet-facing 
      Subnets:
      - Ref: SNPUBA
      - Ref: SNPUBB  
      - Ref: SNPUBC
      SecurityGroups:
      - Ref: SGLoadBalancer
      Tags:
        - Key: Name
          Value: MyITCorpWORDPRESSALB  

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref TGAutoScalingGroup
        LoadBalancerArn: !Ref ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP

  RDSSubNetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: "WordPressRDSSubnetGroup"
      DBSubnetGroupDescription: "RDS Subnet Group for WordPress"
      SubnetIds:
      - !Ref "SNDBA"
      - !Ref "SNDBB"
      - !Ref "SNDBC"

  DBUserParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /MyITCorp/Wordpress/DBUser
      Tier: Standard
      Type: String
      DataType: text
      Value: wordpressuser
      Description: WordPress Database User - the login for the specific WordPress DB

  DBNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /MyITCorp/Wordpress/DBName
      Tier: Standard
      Type: String
      DataType: text
      Value: a4lwordpressdb
      Description: WordPress Database Name - the name of the WordPress database

  DBEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /MyITCorp/Wordpress/DBEndpoint
      Tier: Standard
      Type: String
      DataType: text
      Value: !GetAtt WordpressDB.Endpoint.Address
      Description: WordPress Endpoint Name - endpoint for the WordPress DB

  ALBDNSNameParameter:
    Type: AWS::SSM::Parameter
    DependsOn:                 
    - ApplicationLoadBalancer     
    Properties:
      Name: /MyITCorp/Wordpress/ALBDNSNAME
      Tier: Standard
      Type: String
      DataType: text
      Value: !GetAtt ApplicationLoadBalancer.DNSName
      Description: WordPress ALB DNS Name - DNS Name of the Application Load Balancer for WordPress

  EFSIDParameter:
    Type: AWS::SSM::Parameter
    DependsOn:                 
    - EFSFileSystem     
    Properties:
      Name: /MyITCorp/Wordpress/EFSFSID
      Tier: Standard
      Type: String
      DataType: text
      Value: !GetAtt EFSFileSystem.FileSystemId
      Description: WordPress Endpoint Name - File System ID for WordPress Content (wp-content)

  DBPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /MyITCorp/Wordpress/DBPassword
      Tier: Standard
      Type: String
      DataType: text
      Value: 4n1m4l54L1f3
      Description: WordPress DB Password - the password for the DBUser

  DBRootPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /MyITCorp/Wordpress/DBRootPassword
      Tier: Standard
      Type: String
      DataType: text
      Value: 4n1m4l54L1f3
      Description: WordPress DBRoot Password - the password for the database root user, used for self-managed admin

  WordpressDB:
    Type: 'AWS::RDS::DBInstance'
    DependsOn:                 
    - RDSSubNetGroup 
    - SGDatabase 
    Properties:
      DBInstanceIdentifier: MyITCorpWordPress
      DBName: a4lwordpressdb
      AvailabilityZone: us-east-1a
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      StorageEncrypted: true
      Engine: MySQL
      EngineVersion: "8.0.32"
      MasterUsername: "wordpressuser"
      MasterUserPassword: "4n1m4l54L1f3"
      DBSubnetGroupName: !Ref RDSSubNetGroup
      VPCSecurityGroups:
      - !Ref SGDatabase
#      MultiAZ: true #this will incur charges
#      MonitoringInterval: 60
#      MonitoringRoleArn: 'arn:aws:iam::123456789012:role/rds-monitoring-role'

  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED
#      PerformanceMode: generalPurpose
#      ThroughputMode: bursting
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS      
      FileSystemTags:
      - Key: Name
        Value: MyITCorp-WORDPRESS-CONTENT

  EFSMountTargetAZ1:
    Type: AWS::EFS::MountTarget
    DependsOn:
    - EFSFileSystem
    - SGEFS
    - SNAPPA
    Properties:
      FileSystemId:
        Ref: EFSFileSystem
      SubnetId: !Ref SNAPPA
      SecurityGroups:
        - !Ref SGEFS

  EFSMountTargetAZ2:
    Type: AWS::EFS::MountTarget
    DependsOn:
    - EFSFileSystem
    - SGEFS
    - SNAPPB
    Properties:
      FileSystemId:
        Ref: EFSFileSystem
      SubnetId: !Ref SNAPPB
      SecurityGroups:
        - !Ref SGEFS  

  EFSMountTargetAZ3:
    Type: AWS::EFS::MountTarget
    DependsOn:
    - EFSFileSystem
    - SGEFS
    - SNAPPC
    Properties:
      FileSystemId:
        Ref: EFSFileSystem
      SubnetId: !Ref SNAPPC
      SecurityGroups:
        - !Ref SGEFS 	

  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: WordPress-LT
      LaunchTemplateData:
        IamInstanceProfile: 
          Name: !Ref WordpressInstanceProfile      
        SecurityGroupIds: 
          - !Ref SGWordpress        
        ImageId: !Ref LatestAMIID
        InstanceType: t2.micro
        CreditSpecification: 
          CpuCredits: Unlimited
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
                                            
            ALBDNSNAME=$(aws ssm get-parameters --region us-east-1 --names /MyITCorp/Wordpress/ALBDNSNAME --query Parameters[0].Value)                                             
            ALBDNSNAME=`echo $ALBDNSNAME | sed -e 's/^"//' -e 's/"$//'`
            	
            EFSFSID=$(aws ssm get-parameters --region us-east-1 --names /MyITCorp/Wordpress/EFSFSID --query Parameters[0].Value)
            EFSFSID=`echo $EFSFSID | sed -e 's/^"//' -e 's/"$//'`
            	
            DBPassword=$(aws ssm get-parameters --region us-east-1 --names /MyITCorp/Wordpress/DBPassword --with-decryption --query Parameters[0].Value)                           
            DBPassword=`echo $DBPassword | sed -e 's/^"//' -e 's/"$//'`
            
            DBRootPassword=$(aws ssm get-parameters --region us-east-1 --names /MyITCorp/Wordpress/DBRootPassword --with-decryption --query Parameters[0].Value)                   
            DBRootPassword=`echo $DBRootPassword | sed -e 's/^"//' -e 's/"$//'`
            	
            DBUser=$(aws ssm get-parameters --region us-east-1 --names /MyITCorp/Wordpress/DBUser --query Parameters[0].Value)
            DBUser=`echo $DBUser | sed -e 's/^"//' -e 's/"$//'`
            
            DBName=$(aws ssm get-parameters --region us-east-1 --names /MyITCorp/Wordpress/DBName --query Parameters[0].Value)
            DBName=`echo $DBName | sed -e 's/^"//' -e 's/"$//'`
            
            DBEndpoint=$(aws ssm get-parameters --region us-east-1 --names /MyITCorp/Wordpress/DBEndpoint --query Parameters[0].Value)                                             
            DBEndpoint=`echo $DBEndpoint | sed -e 's/^"//' -e 's/"$//'`
            
            dnf -y update
                                 
            dnf install wget php-mysqlnd httpd php-fpm php-mysqli mariadb105-server php-json php php-devel stress amazon-efs-utils -y
                                      
            systemctl enable httpd  
            systemctl start httpd
                         
            mkdir -p /var/www/html/wp-content
            chown -R ec2-user:apache /var/www/             
            echo -e "$EFSFSID:/ /var/www/html/wp-content efs _netdev,tls,iam 0 0" >> /etc/fstab
            mount -a -t efs defaults 
                     
            wget http://wordpress.org/latest.tar.gz -P /var/www/html
            cd /var/www/html                               
            tar -zxvf latest.tar.gz                        
            cp -rvf wordpress/* .                         
            rm -R wordpress                               
            rm latest.tar.gz 
            
            sudo cp ./wp-config-sample.php ./wp-config.php 
            sed -i "s/'database_name_here'/'$DBName'/g" wp-config.php
            sed -i "s/'username_here'/'$DBUser'/g" wp-config.php
            sed -i "s/'password_here'/'$DBPassword'/g" wp-config.php
            sed -i "s/'localhost'/'$DBEndpoint'/g" wp-config.php
            
            mysqldump -h $DBEndpoint -u $DBUser -p$DBPassword $DBName > MyITCorpWordPress.sql 
            mysql -h $DBEndpoint -u $DBUser -p$DBPassword $DBName < MyITCorpWordPress.sql
            
            usermod -a -G apache ec2-user                  
            chown -R ec2-user:apache /var/www             
            chmod 2775 /var/www                           
            find /var/www -type d -exec chmod 2775 {} \;   
            find /var/www -type f -exec chmod 0664 {} \;
            	
            cat >> /home/ec2-user/update_wp_ip.sh<< 'EOF'  
            #!/bin/bash
                                                
            source <(php -r 'require("/var/www/html/wp-config.php"); echo("DB_NAME=".DB_NAME."; DB_USER=".DB_USER."; DB_PASSWORD=".DB_PASSWORD."; DB_HOST=".DB_HOST); ')      
            SQL_COMMAND="mysql -u $DB_USER -h $DB_HOST -p$DB_PASSWORD $DB_NAME -e"
            OLD_URL=$(mysql -u $DB_USER -h $DB_HOST -p$DB_PASSWORD $DB_NAME -e 'select option_value from wp_options where option_id = 1;' | grep http)
            
            ALBDNSNAME=$(aws ssm get-parameters --region us-east-1 --names /MyITCorp/Wordpress/ALBDNSNAME --query Parameters[0].Value)                                             
            ALBDNSNAME=`echo $ALBDNSNAME | sed -e 's/^"//' -e 's/"$//'`
            
            $SQL_COMMAND "UPDATE wp_options SET option_value = replace(option_value, '$OLD_URL', 'http://$ALBDNSNAME') WHERE option_name = 'home' OR option_name = 'siteurl';"
            $SQL_COMMAND "UPDATE wp_posts SET guid = replace(guid, '$OLD_URL','http://$ALBDNSNAME');"
            $SQL_COMMAND "UPDATE wp_posts SET post_content = replace(post_content, '$OLD_URL', 'http://$ALBDNSNAME');"
            $SQL_COMMAND "UPDATE wp_postmeta SET meta_value = replace(meta_value,'$OLD_URL','http://$ALBDNSNAME');"
            EOF
                                
            chmod 755 /home/ec2-user/update_wp_ip.sh       
            echo "/home/ec2-user/update_wp_ip.sh" >> /etc/rc.local
            /home/ec2-user/update_wp_ip.sh
            	
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref EmailNotification
          Protocol: email

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
    - WordpressInstanceProfile 
    - LaunchTemplate
    - WordpressDB 
    Properties:
      AutoScalingGroupName: MyITCorpWordPressASG
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '3'
      MinSize: '1'
      DesiredCapacity: '1'
#      HealthCheckType: ELB  #having issues with it creating and terminating a lot of instances
#      LoadBalancerNames: 
#      - ApplicationLoadBalancer
      VPCZoneIdentifier:
      - !Ref "SNPUBA"
      - !Ref "SNPUBB"
      - !Ref "SNPUBC"
      TargetGroupARNs:
        - !Ref TGAutoScalingGroup
      NotificationConfigurations:
        - TopicARN: !Ref NotificationTopic
          NotificationTypes: ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR', 'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR']
      Tags:
        - Key: Name
          Value: WordPress-ASG  
          PropagateAtLaunch: true

  ScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      ScalingAdjustment: '1'
      
  ScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      ScalingAdjustment: '-1'

  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '40'
      AlarmDescription: "Alarm set for greater than 40% of CPU utilization" 
      Period: '60'
      AlarmActions:
        - !Ref ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
      
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '40'
      AlarmDescription: "Alarm set for less than 40% of CPU utilization" 
      Period: '60'
      AlarmActions:
        - !Ref ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  WordpressRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess

  WordpressInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref WordpressRole

Outputs:
  ALBURL:
    Description: The Load Balancer URL
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'         
  EFSFileSystemID:                                                     
    Description: The Elastic File System URL                      
    Value: !Sub EFSFileSystem.FileSystemId 
  RDSEndPoint:                                         
    Description: The endpoint for the RDS Wordpress DB               
    Value: !Sub 'http://${WordpressDB.Endpoint.Address}'     
    
    